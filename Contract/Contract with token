// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract SmartBondToken is ERC20 {
    // 1. Variables
    mapping(address => bool) public isTokenHolder;
    address[] public tokenHolders;

    address public issuer;
    uint256 public maturityDate;
    uint256 public principalAmount;
    uint256 public couponFrequency;
    uint256 public couponAmount;
    uint256 public lastCouponPaymentTime;
    
    // 2. Events
    event CouponPayment(address indexed recipient, uint256 amount);
    event MaturityReached();
    event Redemption(address indexed recipient, uint256 principal, uint256 lastCouponAmount);
    event TokenPurchased(address indexed buyer, uint256 amount, uint256 totalValue);

    // 3. Constructor
    constructor(
        string memory name,
        string memory symbol,
        uint32 _totalSupply,
        uint256 _maturity,
        uint256 _principalAmount,
        uint256 _couponFrequency,
        uint256 _couponAmount
    ) ERC20(name, symbol) {
        issuer = msg.sender;

        maturityDate = block.timestamp + _maturity * 1 minutes;

        principalAmount = _principalAmount;
        couponFrequency = _couponFrequency;
        couponAmount = _couponAmount;
        lastCouponPaymentTime = block.timestamp;
        _mint(msg.sender, _totalSupply);
    }

    // 4. Functions
    function buyTokens(uint256 numTokens) external payable {
        uint256 totalValue = msg.value;
        require(totalValue == numTokens * principalAmount, "Incorrect payment amount");
        _mint(msg.sender, numTokens);

        emit TokenPurchased(msg.sender, numTokens, totalValue);
        
        if (!isTokenHolder[msg.sender]) {
            isTokenHolder[msg.sender] = true;
            tokenHolders.push(msg.sender);
        }
    }

    function payCoupon() external {
        require(block.timestamp >= lastCouponPaymentTime + couponFrequency * 1 minutes, "Coupon not due yet");
        uint256 issuerBalance = balanceOf(issuer);
    
        require(issuerBalance >= totalSupply() * couponAmount, "Insufficient balance for coupon payments");

        for (uint256 i = 0; i < tokenHolders.length; i++) {
            address holder = tokenHolders[i];
            uint256 balance = balanceOf(holder);
            if (balance >= couponAmount) {
                transfer(holder, couponAmount);
                emit CouponPayment(holder, couponAmount);
            }
        }

        lastCouponPaymentTime = block.timestamp;
    }

    function isMatured() public view returns (bool) {
        return block.timestamp >= maturityDate;
    }

    function redeem() external {
        require(isMatured(), "Bond has not matured yet");
        require(msg.sender != issuer, "The issuer cannot redeem the bond");
        
        uint256 totalValue = principalAmount + couponAmount; // Total value includes the principal and one last coupon payment
        
        require(balanceOf(msg.sender) >= totalValue, "Insufficient balance for redemption");
        _burn(msg.sender, balanceOf(msg.sender)); // Burn all of the bondholder's tokens
        payable(msg.sender).transfer(totalValue); // Transfer the total value to the bondholder
        emit Redemption(msg.sender, principalAmount, couponAmount);
    }
}
