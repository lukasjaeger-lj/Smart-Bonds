// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract SmartBondToken is ERC20 {
    // 1. Variables
    mapping(address => bool) public isTokenHolder;
    address[] public tokenHolders;

    address public issuer;
    uint256 public maturityDate;
    uint256 public principalAmount;
    uint256 public couponFrequency;
    uint256 public couponAmount;
    uint256 public lastCouponPaymentTime;
    
    // 2. Events
    event CouponPayment(address indexed recipient, uint256 amount);
    event MaturityReached();
    event Redemption(address indexed recipient, uint256 principal, uint256 lastCouponAmount);
    event TokenPurchased(address indexed buyer, uint256 numTokens, uint256 totalValue);

    // 3. Constructor
    constructor(
        string memory name,
        string memory symbol,
        uint32 _totalSupply,
        uint256 _maturity,
        uint256 _principalAmount,
        uint256 _couponFrequency,
        uint256 _couponAmount
    ) ERC20(name, symbol) {
        issuer = msg.sender;

        maturityDate = block.timestamp + _maturity * 1 minutes;
        principalAmount = _principalAmount;
        couponFrequency = _couponFrequency;
        couponAmount = _couponAmount;
        lastCouponPaymentTime = block.timestamp;
        _mint(issuer, _totalSupply); // Mint tokens to the issuer
    }

    // 4. Functions
    function buyTokens(uint256 numTokens) external payable {
        uint256 totalValue = msg.value;
        uint256 purchaseValue = principalAmount * numTokens;
        require(totalValue == purchaseValue, "Incorrect payment amount");
        
        // Mint the desired number of tokens to the buyer
        _mint(msg.sender, numTokens);
        emit TokenPurchased(msg.sender, numTokens, totalValue);
        
        // Transfer the principal to the issuer
        payable(issuer).transfer(purchaseValue);
        
        // Mark the buyer as a token holder
        isTokenHolder[msg.sender] = true;
        tokenHolders.push(msg.sender);
    }

    function payCoupon() external {
        require(block.timestamp >= lastCouponPaymentTime + couponFrequency * 1 minutes, "Coupon not due yet");
        require(block.timestamp < maturityDate, "Maturity reached, no more coupons");
        require(msg.sender == issuer, "Only issuer can make coupon payments");
        
        // Pay coupon to all token holders
        for (uint256 i = 0; i < tokenHolders.length; i++) {
            address holder = tokenHolders[i];
            transfer(holder, couponAmount);
            emit CouponPayment(holder, couponAmount);
        }

        lastCouponPaymentTime = block.timestamp;
    }

    function isMatured() public view returns (bool) {
        return block.timestamp >= maturityDate;
    }

    function redeem() external {
        require(isMatured(), "Bond has not matured yet");
        require(msg.sender == issuer, "Only the issuer can redeem the bond");
        require(block.timestamp >= maturityDate, "Maturity not reached, cannot redeem yet");

        // Calculate the total value to send to the bondholder
        uint256 totalValue = principalAmount + couponAmount;

        // Transfer the total value to the bondholder
        payable(msg.sender).transfer(totalValue);
        
        // Burn the tokens owned by the bondholder
        _burn(msg.sender, balanceOf(msg.sender));

        emit Redemption(msg.sender, principalAmount, couponAmount);
    }
}
